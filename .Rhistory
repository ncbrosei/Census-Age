3 + 3
myVar <- 2
myVar
myVar + 4
3 + 4
myVar <- 6
test(x){}
test(x){x + 3}
function(x)
x + 3
function(3)
function(x){}
function test(x){x + 3}
sqrt(myVar)
myString <- "string"
myString
myString + 'c'
myString + "c"
function()
functionBody()
die <- c(1, 2, 3, 4, 5, 6)
is.vector(die)
five <- 5
is.vector(five)
length(five)
length(die)
int <- 1L
text <- "text"
sum(int)
int <- c(1L, 2L, 3L)
sum(int)
sum(text)
typeof(int)
typeof(die)
typeof(text)
3 > 4
3 = 3
3 < 4
typeof(hand)
typeof(hand)
hand <- c("Ace", "King", "Queen", "Jack", "Ten")
typeof(hand)
hand <- c("Ace", "King", "Queen", "Jack", "Ten", "spades", "spades", "spades", "spades", "spades")
m <- matrix(hand, nrow = 5, byrow = TRUE)
m
hand <- c("Ace", "King", "Queen", "Jack", "Ten", "spades", "spades", "spades", "spades", "spades")
m <- matrix(hand, nrow = 5, byrow = FALSE)
m
clase(hand)
class(hand)
class(hand)
class(m)
now <-Sys.time()
now
now <-Sys.time()
now
typeof(now)
class(now)
typeof(now)
class(now)
unclass(now)
unclass(hand)
card <- c("ace", "heart", 1)
card
card <- list("ace", "heart", 1)
card
deck <- read.csv("~/9629323-ee5dfc039fd581cb467cc69c226ea2524913c3d8/deck.csv")
View(deck)
write.csv(deck, file = "cards.csv", row.names = FALSE)
getwd()
deck[0,0]
deck [1,1]
deck[1,0]
deck[1,1,1]
deck[1]
deck[0,1]
deck[2]
deck[3]
deck[3, 1]
deck [1, 1:3]
deck [1, 3]
deck [1, 2]
deal <- function(cards){
cards[1, ]
}
deal(deck)
deck2 <- deck
random <- sample(1:52, size = 52)
deck2 <- deck[random, ]
head(deck2)
shuffle <- function(cards){
random <- sample(1:52, size = 52)
cards2 <- cards[random, ]
cards2
}
shuffle(deck)
deck
deck2 <- deck
deck2$value[c(13, 26, 29, 52)] <- 14
deck2
deck3 <- shuffle(deck)
deck2$face
deck2$face == ace
deck2$face == "ace"
sum(deck2$face == "ace")
deck3$value[deck3$face == "ace"] <- 14
head(deck3)
deck3
deck4 <- shuffle(deck)
deck4$suit == "heart"
sum(deck4$suit == "heart")
sum(deck4$suit == "hearts")
deck4 <- deck
deck4$value <- 0
head(deck4)
deck4$value[deck4$suit == "hearts"] <- 1
deck4
deck4[deck4$face == "queen" & deck4$suit == "spades"]
deck4$face == "queen" & deck4$suit == "spades"
sum(deck4$face == "queen" & deck4$suit == "spades")
queenOfSpades <- deck4$face == "queen" & deck4$suit == "spades"
deck4$face == "queen" & deck4$suit == "spades"
deck4$value[queenOfSpades] <- 13
deck4$value[queenOfSpades]
w <- c(-1, 0, 1)
x <- c(5, 15)
y <- "February"
z <- c("Monday", "Tuesday", "Friday")
w >= 0
x > 10 & x < 20
y == "February"
week <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
#tests
w >= 0
x > 10 & x < 20
y == "February"
z %in% week
all(z %in% week)
deck5 <- deck
head(deck5)
facecard <- c("king", "queen", "jack")
deck5$value[deck5$face %in% facecard] <- 10
head(deck5)
deck5$value[deck5$face == "ace"] <- NA
deck5
ls(globalenv())
environment()
environment(shuffle)
deal <- function(){
deck[1, ]
}
deal
deal()
DECK <- deck
deal <- function(){
card <- deck[1, ]
assign(deck, deck[-1, ], envir = globalenv())
}
deal()
deal <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
}
deal()
deal <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal()
deal()
deal()
deal()
shuffle <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
shuffle()
deal()
deal()
deal()
deal()
shuffle()
setup <- function(deck){
DECK <- deck
deal <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
shuffle <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
setup <- function(deck){
DECK <- deck
DEAL <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
setup <- function(deck){
DECK <- deck
DEAL <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
deal
deal()
setup <- function(deck){
DECK <- deck
DEAL <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env())
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env())
}
list(deal = DEAL, shuffle = SHUFFLE)
}
setup <- function(deck){
DECK <- deck
DEAL <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env(environment()))
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env(environment()))
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
shuffle(deck)
shuffle()
get_symbols()
get_symbols <- function(){
wheel <-c("DD", "7","BBB", "B","C","0")
sample(wheel, size = 3, replace = TRUE, prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols()
get_symbols <- function(){
wheel <-c("DD", "7","BBB", "B", "B","C","0")
sample(wheel, size = 3, replace = TRUE, prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols()
get_symbols()
get_symbols()
#rename column names
colnames(df2012) <- c("id2","totalPop12","age65_12","ageMed_12")
ibrary(tidyverse)
library(readxl)
#create path to excel file
url <- "Census_Age.xlsx"
excel_sheets(url)
#loads excel sheet in. Skips first line (skip = 1)
dfread <- read_excel(url, sheet="ACS_12_5YR_S0101_with_ann", skip=1)
colnames(dfread)
summary(dfread)
#select columns
df2012 <- select(dfread, "Id2",
"Total; Estimate; Total population",
"Total; Estimate; SELECTED AGE CATEGORIES - 65 years and over",
"Total; Estimate; SUMMARY INDICATORS - Median age (years)")
#rename column names
colnames(df2012) <- c("id2","totalPop12","age65_12","ageMed_12")
#convert to numerics
df2012$totalPop12 <- as.numeric(df2012$totalPop12)
df2012$age65_12 <- as.numeric(df2012$age65_12)
df2012$ageMed_12 <- as.numeric(df2012$ageMed_12)
summary(df2012)
#create path to excel file
url <- "Census_Age.xlsx"
#loads packages
library(tidyverse)
library(readxl)
#create path to excel file
url <- "Census_Age.xlsx"
excel_sheets(url)
#loads excel sheet in. Skips first line (skip = 1)
dfread <- read_excel(url, sheet="ACS_12_5YR_S0101_with_ann", skip=1)
colnames(dfread)
summary(dfread)
#select columns
df2012 <- select(dfread, "Id2",
"Total; Estimate; Total population",
"Total; Estimate; SELECTED AGE CATEGORIES - 65 years and over",
"Total; Estimate; SUMMARY INDICATORS - Median age (years)")
#rename column names
colnames(df2012) <- c("id2","totalPop12","age65_12","ageMed_12")
#convert to numerics
df2012$totalPop12 <- as.numeric(df2012$totalPop12)
df2012$age65_12 <- as.numeric(df2012$age65_12)
df2012$ageMed_12 <- as.numeric(df2012$ageMed_12)
summary(df2012)
#create path to excel file
url <- "Census_Age.xlsx"
excel_sheets(url)
setwd("~/Computer Science/Census Age")
excel_sheets(url)
#loads excel sheet in. Skips first line (skip = 1)
dfread <- read_excel(url, sheet="ACS_12_5YR_S0101_with_ann", skip=1)
colnames(dfread)
summary(dfread)
#select columns
df2012 <- select(dfread, "Id2",
"Total; Estimate; Total population",
"Total; Estimate; SELECTED AGE CATEGORIES - 65 years and over",
"Total; Estimate; SUMMARY INDICATORS - Median age (years)")
#rename column names
colnames(df2012) <- c("id2","totalPop12","age65_12","ageMed_12")
#convert to numerics
df2012$totalPop12 <- as.numeric(df2012$totalPop12)
df2012$age65_12 <- as.numeric(df2012$age65_12)
df2012$ageMed_12 <- as.numeric(df2012$ageMed_12)
summary(df2012)
dfread2 <- read_excel(url, sheet = "ACS_17_5YR_S0101_with_ann", skip=1)
colnames(dfread2)
df2017 <- select(dfread2, "Id2",
"Total; Estimate; Total population",
"Total; Estimate; SELECTED AGE CATEGORIES - 65 years and over",
"Total; Estimate; SUMMARY INDICATORS - Median age (years)")
#rename column names
colnames(df2017) <- c("id2","totalPop17","age65_17","ageMed_17")
#convert to numerics
df2017$totalPop17 <- as.numeric(df2017$totalPop17)
df2017$age65_17 <- as.numeric(df2017$age65_17)
df2017$ageMed_17 <- as.numeric(df2017$ageMed_17)
summary(dfread2)
summary(df2017)
dfage_1217 <- merge(x = df2017, y = df2012, by = "id2", all.x = TRUE)
View(dfage_1217)
#rename column names
colnames(df2012) <- c("id2","totalPop12","percage65_12","ageMed_12")
df2012 <- select(dfread, "Id2",
"Total; Estimate; Total population",
"Total; Estimate; SELECTED AGE CATEGORIES - 65 years and over",
"Total; Estimate; SUMMARY INDICATORS - Median age (years)")
#rename column names
colnames(df2012) <- c("id2","totalPop12","percage65_12","ageMed_12")
#convert to numerics
df2012$totalPop12 <- as.numeric(df2012$totalPop12)
df2012$percage65_12 <- as.numeric(df2012$percage65_12)
df2012$ageMed_12 <- as.numeric(df2012$ageMed_12)
summary(df2012)
#do the same for 2017 data
dfread2 <- read_excel(url, sheet = "ACS_17_5YR_S0101_with_ann", skip=1)
colnames(dfread2)
df2017 <- select(dfread2, "Id2",
"Total; Estimate; Total population",
"Total; Estimate; SELECTED AGE CATEGORIES - 65 years and over",
"Total; Estimate; SUMMARY INDICATORS - Median age (years)")
#rename column names
colnames(df2017) <- c("id2","totalPop17","percage65_17","ageMed_17")
#convert to numerics
df2017$totalPop17 <- as.numeric(df2017$totalPop17)
df2017$percage65_17 <- as.numeric(df2017$percage65_17)
df2017$ageMed_17 <- as.numeric(df2017$ageMed_17)
summary(df2017)
dfage_1217 <- merge(x = df2017, y = df2012, by = "id2", all.x = TRUE)
#rename column names
colnames(df2017) <- c("id2","totalPop17","age65_17","ageMed_17")
#convert to numerics
df2017$totalPop17 <- as.numeric(df2017$totalPop17)
df2017$age65_17 <- as.numeric(df2017$age65_17)
df2017$ageMed_17 <- as.numeric(df2017$ageMed_17)
summary(df2017)
dfage_1217 <- merge(x = df2017, y = df2012, by = "id2", all.x = TRUE)
dfage_1217$age65_17 <- dfage_1217$totalPop12 * (dfage_1217$percage65_12 *0.01)
df2017 <- select(dfread2, "Id2",
"Total; Estimate; Total population",
"Total; Estimate; SELECTED AGE CATEGORIES - 65 years and over",
"Total; Estimate; SUMMARY INDICATORS - Median age (years)")
#rename column names
colnames(df2017) <- c("id2","totalPop17","age65_17","ageMed_17")
#convert to numerics
df2017$totalPop17 <- as.numeric(df2017$totalPop17)
df2017$age65_17 <- as.numeric(df2017$age65_17)
df2017$ageMed_17 <- as.numeric(df2017$ageMed_17)
summary(df2017)
dfage_1217 <- merge(x = df2017, y = df2012, by = "id2", all.x = TRUE)
dfage_1217$age65_12 <- dfage_1217$totalPop12 * (dfage_1217$percage65_12 *0.01)
dfage_1217$age65_12 <- round(dfage_1217$totalPop12 * (dfage_1217$percage65_12 *0.01), 0)
dfage_1217$totalChange <- dfage_1217$totalPop17 - dfage_1217$totalPop12
dfage_1217$age65Change <- dfage_1217$age65_17 - dfage_1217$age65_12
#calculate percent change of 65 and older. (x/y)/y
dfage_1217$percentChange <- round(((dfage_1217$age65_17-dfage_1217$age65_12)/dfage_1217$age65_12)*100, 2)
#create index based on z score.
# z score = (value - mean of all values)/ standard deviation of all values
dfage_1217$age65ChangeZ <- round((dfage_1217$age65Change - mean(dfage_1217$age65Change, na.rm = TRUE))
/sd(dfage_1217$age65Change, na.rm = TRUE), 2)
#z score for percent change
dfage_1217$percentChangeZ <- round((dfage_1217$percentChange - mean(dfage_1217$percentChange, na.rm = TRUE))
/sd(dfage_1217$percentChange, na.rm = TRUE), 2)
dfage_1217$age65_index <- (dfage_1217$age65ChangeZ * 0.4) + (dfage_1217$percentChangeZ * 0.6)
write.csv(dfage_1217, "dfage_1217.csv", na = "")
